version: '3.8'

services:
  visionguard:
    build:
      context: .
      dockerfile: Dockerfile
    image: visionguard:latest
    container_name: visionguard-api
    ports:
      - "8000:8000"
    volumes:
      # Optional: Mount COCO dataset for evaluation (uncomment if available)
      # - ./coco:/app/coco:ro
      # - ./annotations:/app/annotations:ro

      # Persist model downloads between container restarts
      - visionguard-models:/app/.cache/torch
    environment:
      - PYTHONUNBUFFERED=1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - visionguard-network
    # Uncomment for GPU support (requires nvidia-docker)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: visionguard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: visionguard-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - visionguard-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  visionguard-models:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  visionguard-network:
    driver: bridge
